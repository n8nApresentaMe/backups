{"createdAt":"2025-08-16T15:05:10.892Z","updatedAt":"2025-08-20T21:02:13.000Z","id":"lxkabBeJLk46XLO4","name":"My workflow","active":false,"isArchived":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"lead-timeline","responseMode":"lastNode","options":{}},"id":"8dc88383-6f09-43bb-9435-8e60f0696c8c","name":"Webhook (POST)","type":"n8n-nodes-base.webhook","typeVersion":1,"position":[-1240,540],"webhookId":"e81a562b-255c-4020-9c8a-7babe49246ec"},{"parameters":{"assignments":{"assignments":[{"name":"leadId","type":"string","value":"={{ $json.body?.leadId ?? $json.query?.leadId ?? $json.leadId ?? $json.id }}"},{"name":"locale","type":"string","value":"={{ $env.locale ?? 'pt-BR' }}"},{"name":"timezone","type":"string","value":"={{ $env.timezone ?? 'America/Sao_Paulo' }}"}]},"options":{}},"id":"f3cf4315-054f-46c0-a622-ba92175c5487","name":"Set • Ingest leadId","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-980,580]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"operator":{"type":"string","operation":"notEmpty","singleValue":true},"leftValue":"={{ $json.leadId }}","id":"548d3734-4552-4054-bc70-17acd6a216d5"}],"combinator":"and"},"options":{}},"id":"73395dc6-7286-468c-96f6-24945cde02fb","name":"IF • leadId presente?","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-700,580]},{"parameters":{"url":"={{ $env.BITRIX_URL }}/crm.activity.list.json","options":{}},"id":"d670bb69-a02d-433c-8da0-914bae2fcd2d","name":"HTTP • Atividades/Tarefas","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-320,460],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"url":"={{ $env.BITRIX_URL }}/crm.timeline.comment.list.json","options":{}},"id":"3487fd99-8869-4c07-a85c-f87e7a9828dc","name":"HTTP • Comentários/Notas","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[20,400],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"url":"={{ $env.CRM_BASE_URL }}/rest/{{$env.CRM_TOKEN}}/crm.timeline.list.json","sendQuery":true,"specifyQuery":"json","options":{}},"id":"0c559750-d9c5-4302-bfbd-0b885af928e0","name":"HTTP • Mudanças de Estágio/Status","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[20,580],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"url":"={{ $env.CRM_BASE_URL }}/rest/{{$env.CRM_TOKEN}}/crm.activity.list.json","options":{}},"id":"1af5e7df-164e-4cf3-b72d-e96fe0f6c4c7","name":"HTTP • Mensagens (Email/Chat/SMS)","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[20,760],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"url":"={{ $env.CRM_BASE_URL }}/rest/{{$env.CRM_TOKEN}}/crm.activity.list.json","options":{}},"id":"2884b16f-19ef-4e03-8937-52b7033b3657","name":"HTTP • Chamadas & Transcrições","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[20,940],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"url":"={{ $env.CRM_BASE_URL }}/rest/{{$env.CRM_TOKEN}}/crm.timeline.file.list.json","options":{}},"id":"492bd750-948c-43e0-83fa-9b468f130a6d","name":"HTTP • Arquivos/Anexos (metadados)","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[20,1120],"retryOnFail":true,"waitBetweenTries":3000},{"parameters":{"jsCode":"// Utilidades\nfunction toStr(x){return (x===undefined||x===null)?'':String(x)}\nfunction trunc(s,limit=20000){s=toStr(s); return s.length>limit? s.slice(0,limit)+\"\\n[conteúdo truncado]\" : s}\nfunction hash(s){let h=0; for(let i=0;i<s.length;i++){h=((h<<5)-h)+s.charCodeAt(i); h|=0;} return String(h)}\nfunction parseDateAny(v){if(!v) return null; const d=new Date(v); return isNaN(d.getTime())? null : d}\nfunction toTZISO(date, tz){ if(!date) return null; try { return new Intl.DateTimeFormat('en-CA',{timeZone: tz, hour12:false, year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'}).formatToParts(date).reduce((acc,p)=>{acc[p.type]=p.value;return acc;},{}); } catch(e){ return null; } }\nfunction formatISO(parts){ if(!parts) return null; return `${parts.year}-${parts.month}-${parts.day} ${parts.hour}:${parts.minute}:${parts.second}` }\n\n// Coleta outputs dos nós HTTP\nconst leadId = $json.leadId;\nconst timezone = $json.timezone || 'America/Sao_Paulo';\nconst locale = $json.locale || 'pt-BR';\n\nfunction itemsFrom(node){\n  const out = $items(node) || [];\n  return out.flatMap(it=>{\n    const r = it.json?.result || it.json?.result?.items || it.json?.items || it.json || [];\n    if(Array.isArray(r)) return r; // lista\n    if(r && r.items && Array.isArray(r.items)) return r.items; // Bitrix {result:{items:[]}}\n    return []; // fallback\n  });\n}\n\nconst acts = itemsFrom('HTTP • Atividades/Tarefas');\nconst comments = itemsFrom('HTTP • Comentários/Notas');\nconst stages = itemsFrom('HTTP • Mudanças de Estágio/Status');\nconst messages = itemsFrom('HTTP • Mensagens (Email/Chat/SMS'); // nome correto na chamada abaixo\nconst msgs = itemsFrom('HTTP • Mensagens (Email/Chat/SMS)');\nconst calls = itemsFrom('HTTP • Chamadas & Transcrições');\nconst files = itemsFrom('HTTP • Arquivos/Anexos (metadados)');\n\n// Mapeamento para schema único\nconst unified=[];\nfunction pushItem({id_origem,tipo,canal,autor,responsavel,data, titulo, conteudo, meta}){\n  const d=parseDateAny(data);\n  const tzParts = toTZISO(d, timezone);\n  const data_hora_iso = formatISO(tzParts) || (d? d.toISOString() : null);\n  const key = id_origem || `${tipo}:${data_hora_iso}`;\n  const fingerprint = `${tipo}|${data_hora_iso}|${toStr(conteudo).slice(0,256)}`;\n  unified.push({\n    id_origem: toStr(id_origem||''),\n    tipo, canal: toStr(canal||''), autor: toStr(autor||''),\n    responsavel: toStr(responsavel||''),\n    data_hora_iso,\n    titulo: toStr(titulo||''),\n    conteudo_texto: trunc(conteudo||''),\n    metadados: meta||{},\n    _hash: hash(fingerprint)\n  })\n}\n\n// Heurísticas simples por fonte (ajuste conforme seu CRM)\nacts.forEach(a=>{\n  pushItem({\n    id_origem: a.ID || a.id,\n    tipo: 'atividade',\n    canal: a.PROVIDER_ID || a.PROVIDER_TYPE_ID || a.TYPE_ID,\n    autor: '',\n    responsavel: a.RESPONSIBLE_ID || '',\n    data: a.LAST_UPDATED || a.CREATED,\n    titulo: a.SUBJECT || '',\n    conteudo: a.DESCRIPTION || '',\n    meta: {direction: a.DIRECTION, communications: a.COMMUNICATIONS}\n  })\n});\n\ncomments.forEach(c=>{\n  pushItem({\n    id_origem: c.ID || c.id,\n    tipo: 'comentario',\n    canal: 'crm',\n    autor: c.AUTHOR_ID || '',\n    responsavel: c.RESPONSIBLE_ID || '',\n    data: c.CREATED || c.CREATED_TIME || c.DATE_CREATE,\n    titulo: 'Comentário',\n    conteudo: c.COMMENT || c.DESCRIPTION || c.TEXT || ''\n  })\n});\n\nstages.forEach(e=>{\n  // Bitrix timeline events trazem TYPE_CATEGORY_ID/TYPE_ID; mapeie mudanças de status\n  const oldStage = e?.FIELDS?.STATUS_OLD || e?.SETTINGS?.OLD_STATUS_ID;\n  const newStage = e?.FIELDS?.STATUS_NEW || e?.SETTINGS?.NEW_STATUS_ID;\n  const resp = e?.AUTHOR_ID || e?.RESPONSIBLE_ID || '';\n  pushItem({\n    id_origem: e.ID || e.id,\n    tipo: 'mudanca_estagio',\n    canal: 'pipeline',\n    autor: e.AUTHOR_ID || '',\n    responsavel: resp,\n    data: e.CREATED || e.CREATED_TIME || e.DATE_CREATE,\n    titulo: 'Mudança de estágio',\n    conteudo: `${oldStage||'?' } → ${newStage||'?'}`,\n    meta: {old: oldStage, new: newStage}\n  })\n});\n\nmsgs.forEach(m=>{\n  const channel = m.PROVIDER_ID || m.PROVIDER_TYPE_ID || 'mensagem';\n  pushItem({\n    id_origem: m.ID || m.id,\n    tipo: 'mensagem',\n    canal: channel,\n    autor: '',\n    responsavel: m.RESPONSIBLE_ID || '',\n    data: m.LAST_UPDATED || m.CREATED,\n    titulo: 'Mensagem',\n    conteudo: m.DESCRIPTION || '',\n    meta: {communications: m.COMMUNICATIONS}\n  })\n});\n\ncalls.forEach(call=>{\n  pushItem({\n    id_origem: call.ID || call.id,\n    tipo: 'chamada',\n    canal: 'telefone',\n    autor: '',\n    responsavel: call.RESPONSIBLE_ID || '',\n    data: call.LAST_UPDATED || call.CREATED,\n    titulo: 'Chamada',\n    conteudo: call.DESCRIPTION || call.RESULT_SUMMARY || '',\n    meta: {duration: call.DURATION, result: call.RESULT_MARK, uf: call.UF_}\n  })\n});\n\nfiles.forEach(f=>{\n  pushItem({\n    id_origem: f.ID || f.id,\n    tipo: 'arquivo',\n    canal: 'anexo',\n    autor: f.AUTHOR_ID || '',\n    responsavel: '',\n    data: f.CREATED || f.DATE_CREATE,\n    titulo: f.TITLE || f.FILE_NAME || 'Arquivo',\n    conteudo: '',\n    meta: {fileId: f.FILE_ID, size: f.SIZE}\n  })\n});\n\n// De-dup por id_origem + _hash\nconst seen = new Set();\nconst deduped = unified.filter(ev=>{ const k = (ev.id_origem||'')+'#'+ev._hash; if(seen.has(k)) return false; seen.add(k); return true; });\n\n// Ordena desc por data\nconst ordered = deduped.sort((a,b)=>{\n  const da = new Date(a.data_hora_iso.replace(' ','T')); const db = new Date(b.data_hora_iso.replace(' ','T'));\n  return (db - da);\n});\n\n// Estatísticas\nconst stats = {\n  totais_por_tipo: {},\n  totais_por_canal: {},\n  janela: {primeiro_evento: null, ultimo_evento: null},\n  top_participantes: [],\n  chamadas: {duracao_total_seg: 0, atendidas: 0, nao_atendidas: 0},\n  estagios: {mudancas: 0, percorridos: []}\n};\n\nconst byPerson = {};\nconst stageSeq = [];\n\nordered.forEach(ev=>{\n  stats.totais_por_tipo[ev.tipo] = (stats.totais_por_tipo[ev.tipo]||0)+1;\n  stats.totais_por_canal[ev.canal] = (stats.totais_por_canal[ev.canal]||0)+1;\n  const who = ev.autor || ev.responsavel || '';\n  if(who){ byPerson[who] = (byPerson[who]||0)+1; }\n  if(ev.tipo==='chamada'){\n    const d = Number(ev.metadados?.duration||0);\n    stats.chamadas.duracao_total_seg += isNaN(d)?0:d;\n    // marcações básicas (result: 2=success? depende do CRM; deixamos heurística simples)\n    const r = ev.metadados?.result;\n    if(r===1 || r==='SUCCESS' || /sucesso|atendida/i.test(ev.conteudo_texto||'')) stats.chamadas.atendidas++;\n    else if(r===0 || r==='FAILED' || /perdida|ocupado|nao atendida/i.test(ev.conteudo_texto||'')) stats.chamadas.nao_atendidas++;\n  }\n  if(ev.tipo==='mudanca_estagio'){\n    stats.estagios.mudancas++;\n    const s = ev.metadados?.new || ev.conteudo_texto?.split('→')?.[1]?.trim();\n    if(s) stageSeq.push(s);\n  }\n});\n\n// janela temporal\nif(ordered.length){\n  stats.janela.ultimo_evento = ordered[0].data_hora_iso;\n  stats.janela.primeiro_evento = ordered[ordered.length-1].data_hora_iso;\n}\n// top 5 participantes\nstats.top_participantes = Object.entries(byPerson)\n  .sort((a,b)=>b[1]-a[1])\n  .slice(0,5)\n  .map(([id,qt])=>({participante:id, interacoes: qt}));\n// estágios percorridos (sequência única)\nconst uniqStages = [];\nstageSeq.forEach(s=>{ if(s && !uniqStages.includes(s)) uniqStages.push(s); });\nstats.estagios.percorridos = uniqStages;\n\nreturn [{ json: { leadId, timeline_normalizada: ordered.map(({_hash, ...rest})=>rest), stats, locale, timezone } }];"},"id":"fdc610fc-05fb-4a86-9a26-6c73df1d1372","name":"Code • Unificar & Normalizar","type":"n8n-nodes-base.code","typeVersion":2,"position":[320,500]},{"parameters":{"jsCode":"const { leadId, timeline_normalizada, stats, locale, timezone } = $json;\nconst total = timeline_normalizada.length;\nfunction fmt(s){return s||'não informado'}\nfunction bulletsFromTimeline(items, max=12){\n  const out=[];\n  for(const ev of items.slice(0,max)){\n    const ts = ev.data_hora_iso?.replace('T',' ').replace('Z','');\n    const line = `${ts??'????-??-?? ??:??'} — ${ev.tipo}/${ev.canal} — ${ (ev.titulo||ev.conteudo_texto||'').replace(/\\s+/g,' ').slice(0,140) }`;\n    out.push(`- ${line}`)\n  }\n  return out.join('\\n');\n}\nconst periodo = `${fmt(stats.janela?.primeiro_evento)} → ${fmt(stats.janela?.ultimo_evento)}`;\nconst byType = Object.entries(stats.totais_por_tipo).map(([k,v])=>`${k}: ${v}`).join(', ');\nconst top = (stats.top_participantes||[]).map(p=>`${p.participante} (${p.interacoes})`).join(', ');\nconst chamadas = `Duração total: ${Math.round(stats.chamadas?.duracao_total_seg||0)}s; atendidas: ${stats.chamadas?.atendidas||0}; não atendidas: ${stats.chamadas?.nao_atendidas||0}`;\nconst estagios = `Mudanças: ${stats.estagios?.mudancas||0}; percorridos: ${(stats.estagios?.percorridos||[]).join(' → ')||'não informado'}`;\n\nconst resumo = `# Relatório de Timeline do Lead\\n\\n**Lead:** ${leadId}\\n\\n**Período:** ${periodo}\\n\\n**Volume:** ${total} interações (${byType||'—'})\\n\\n## Linha do tempo (condensada)\\n${bulletsFromTimeline(timeline_normalizada, 15)}\\n\\n## Dores e interesses\\n- não informado\\n\\n## Objeções e respostas\\n- não informado\\n\\n## Critérios de decisão\\n- não informado\\n\\n## Funil\\n- ${estagios}\\n\\n## Chamadas\\n- ${chamadas}\\n\\n## Top participantes\\n- ${top||'não informado'}\\n\\n## Próximos passos sugeridos (SDR/Vendas)\\n- Agendar follow-up com base no último evento relevante.\\n- Enviar materiais relacionados ao interesse explícito (se houver).\\n- Confirmar responsável atual e próximo marco do funil.`;\n\nreturn [{ json: { ...$json, resumo_markdown: resumo } }];"},"id":"ac24db8c-addf-4a01-ba76-3c6d648d2482","name":"Code • Resumo Markdown","type":"n8n-nodes-base.code","typeVersion":2,"position":[560,500]},{"parameters":{"assignments":{"assignments":[{"name":"leadId","type":"string","value":"={{$json.leadId}}"},{"name":"stats","type":"object","value":"={{$json.stats}}"},{"name":"timeline_normalizada","type":"object","value":"={{$json.timeline_normalizada}}"},{"name":"resumo_markdown","type":"string","value":"={{$json.resumo_markdown}}"},{"name":"markdown","type":"string","value":"={{$json.resumo_markdown}}"}]},"options":{}},"id":"326e8a1c-8d97-4c45-92d8-992e5d7695ca","name":"Set • Saída Final (JSON + Markdown)","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[800,500]},{"parameters":{"respondWith":"json","responseBody":"={{$json}}","options":{}},"id":"a31767d8-b727-47f7-be3b-9dc871ca9807","name":"Responder Webhook (JSON)","type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[1020,500]},{"parameters":{"content":"• Bitrix24 pagina com query 'start'; usar -1 para iteração automática.\\n• Ajuste URLs conforme seu CRM.\\n• Respeito a rate limit: deixe 'waitBetweenTries' e avalie backoff adicional se 429.\\n• Para e-mails/Slack, adicione um nó depois de 'Responder Webhook'."},"id":"c293bb20-0ce5-4c69-8294-22c299897fd4","name":"Sticky Note • Dicas","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[920,1120]}],"connections":{"Webhook (POST)":{"main":[[{"node":"Set • Ingest leadId","type":"main","index":0}]]},"Set • Ingest leadId":{"main":[[{"node":"IF • leadId presente?","type":"main","index":0}]]},"IF • leadId presente?":{"main":[[{"node":"HTTP • Atividades/Tarefas","type":"main","index":0}]]},"HTTP • Atividades/Tarefas":{"main":[[]]},"HTTP • Comentários/Notas":{"main":[[{"node":"Code • Unificar & Normalizar","type":"main","index":0}]]},"HTTP • Mudanças de Estágio/Status":{"main":[[{"node":"Code • Unificar & Normalizar","type":"main","index":0}]]},"HTTP • Mensagens (Email/Chat/SMS)":{"main":[[{"node":"Code • Unificar & Normalizar","type":"main","index":0}]]},"HTTP • Chamadas & Transcrições":{"main":[[{"node":"Code • Unificar & Normalizar","type":"main","index":0}]]},"HTTP • Arquivos/Anexos (metadados)":{"main":[[{"node":"Code • Unificar & Normalizar","type":"main","index":0}]]},"Code • Unificar & Normalizar":{"main":[[{"node":"Code • Resumo Markdown","type":"main","index":0}]]},"Code • Resumo Markdown":{"main":[[{"node":"Set • Saída Final (JSON + Markdown)","type":"main","index":0}]]},"Set • Saída Final (JSON + Markdown)":{"main":[[{"node":"Responder Webhook (JSON)","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"caf8fc9e-446b-4ecd-ae9a-178e661eb8bb","triggerCount":0,"shared":[{"createdAt":"2025-08-16T15:05:10.895Z","updatedAt":"2025-08-16T15:05:10.895Z","role":"workflow:owner","workflowId":"lxkabBeJLk46XLO4","projectId":"4ToGMYJEWvvDSbcz"}],"tags":[]}